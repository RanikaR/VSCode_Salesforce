public class AddPrimaryContact implements Queueable {
    
    /*
     * Create a Queueable Apex class that inserts the same Contact for each Account for a specific state. Write unit tests that achieve 100% code coverage for the class.
     * Create an Apex class called 'AddPrimaryContact' that implements the Queueable interface.
     * Create a constructor for the class that accepts as its first argument a Contact sObject and a second argument as a string for the State abbreviation.
     * The execute method must query for a maximum of 200 Accounts with the BillingState specified by the State abbreviation passed into the constructor 
     * and insert the Contact sObject record associated to each Account. Look at the sObject clone() method.
     * 
     * clone(Boolean preserveId, Boolean isDeepClone, Boolean preserveReadonlyTimestamps, Boolean preserveAutonumber) --> clone(false, false, false, false)
     * 
     * Create an Apex test class called 'AddPrimaryContactTest'.
     * In the test class, insert 50 Account records for BillingState "NY" and 50 Account records for BillingState "CA". Create an instance of 
     * the AddPrimaryContact class, enqueue the job and assert that a Contact record was inserted for each of the 50 Accounts with the BillingState of "CA".
     * The unit tests must cover all lines of code included in the AddPrimaryContact class, resulting in 100% code coverage.
     * Run your test class at least once (via 'Run All' tests the Developer Console) before attempting to verify this challenge.
		*/
    
    private Contact con;
    private String state;
    
    public AddPrimaryContact(Contact con, String state) {
        this.con = con;
        this.state = state;
    }
    
    public void execute(QueueableContext context) {
        // Retrieve account and related contacts of a specified billing state
        List<Account> accList = new List<Account>([SELECT Id, Name, (SELECT Id, FirstName, LastName FROM Contacts) FROM Account WHERE BillingState = :state LIMIT 200]);
        List<Contact> conList = new List<Contact>();
        
        for (Account acc : accList) {
            Contact clonedCon = con.clone(false, false, false, false);
            clonedCon.AccountId = acc.Id;	
            conList.add(clonedCon);
        }
        
        insert conList;
    }
     

}